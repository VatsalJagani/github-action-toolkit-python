name: Type Check & Package Validation

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

permissions:
  contents: read

jobs:
  mypy:
    name: Type Check (mypy)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install uv (official Astral action)
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: "3.12"

      - name: Set up Python (using uv)
        run: uv python install

      - name: Install dependencies with typing extra
        run: uv sync --extra typing

      - name: Run mypy
        run: uv run mypy

  package-validation:
    name: Package Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install uv (official Astral action)
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: "3.12"

      - name: Set up Python (using uv)
        run: uv python install

      - name: Install build dependencies
        run: uv sync

      - name: Build package
        run: uv build

      - name: Check package metadata
        run: |
          uv run python -m pip install twine
          uv run twine check dist/*

      - name: Install package from wheel
        run: |
          uv run python -m pip install dist/*.whl

      - name: Test import
        run: |
          uv run python -c "import github_action_toolkit; print(f'Successfully imported version: {github_action_toolkit.version.VERSION}')"

  commitizen:
    name: Commit Message Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install uv (official Astral action)
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: "3.12"

      - name: Set up Python (using uv)
        run: uv python install

      - name: Install commitizen
        run: uv sync --extra commits

      - name: Check commits
        run: |
          # Get the list of commits in this PR
          BASE_SHA=$(git merge-base origin/${{ github.base_ref }} HEAD)
          for commit in $(git rev-list $BASE_SHA..HEAD); do
            echo "Checking commit: $commit"
            uv run cz check --rev-range $commit || echo "Warning: Commit $commit does not follow conventional commits format"
          done
